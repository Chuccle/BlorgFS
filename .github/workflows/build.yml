name: Build BlorgFS

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  packages: read
  actions: read

env:
  SOLUTION_NAME: BlorgFS.sln
  ChocolateyUseWindowsCompression: 'true'

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Release, Debug]
        platform: [x64]
    name: Build ${{ matrix.config }} ${{ matrix.platform }}

    steps:
    - name: Detect if Dependabot
      id: is_dependabot
      shell: pwsh
      run: echo "is_dependabot=${{ github.actor == 'dependabot[bot]' }}" >> $env:GITHUB_OUTPUT

    - name: Checkout repository and submodules
      uses: actions/checkout@v5
      with:
        token: ${{ steps.is_dependabot.outputs.is_dependabot == 'true' && secrets.GH_DEPENDABOT_PAT || secrets.GH_PAT }}
        submodules: recursive

    - name: Get flatbuffers commit hash
      id: flatbuffers_hash
      shell: pwsh
      run: |
        cd BlorgService/flatbuffers
        $hash = git rev-parse HEAD
        Write-Host "FlatBuffers Hash: $hash"
        echo "flatbuffers_hash=$hash" >> $env:GITHUB_OUTPUT

    - name: Cache FlatBuffers build
      id: cache_flatbuffers
      uses: actions/cache@v4
      with:
        path: BlorgService/flatbuffers/Release
        key: ${{ runner.os }}-flatbuffers-${{ steps.flatbuffers_hash.outputs.flatbuffers_hash }}

    - name: Install build tools
      if: steps.cache_flatbuffers.outputs.cache-hit != 'true'
      shell: pwsh
      run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

    - name: Build FlatBuffers compiler
      if: steps.cache_flatbuffers.outputs.cache-hit != 'true'
      shell: cmd
      run: |
          cd BlorgService\flatbuffers
          cmake -G "Visual Studio 17 2022"
          cmake --build . --config Release

    - name: Create generated C++ flatbuffer files
      shell: cmd
      run: |
        if exist "BlorgService\flatbuffers\Release\flatc.exe" (
          if exist "schemas\metadata_flatbuffer.fbs" (
            mkdir BlorgService\generated
            BlorgService\flatbuffers\Release\flatc.exe --cpp -o BlorgService\generated schemas\metadata_flatbuffer.fbs
            echo "Generated C++ FlatBuffer files"
          ) else (
            echo "Schema file not found at schemas\metadata_flatbuffer.fbs"
            dir schemas\
          )
        ) else (
          echo "FlatBuffers compiler not found"
        )

    - name: Get flatcc commit hash
      id: flatcc_hash
      shell: pwsh
      run: |
        if (Test-Path "flatcc") {
          cd flatcc
          $hash = git rev-parse HEAD
          Write-Host "FlatCC Hash: $hash"
          echo "flatcc_hash=$hash" >> $env:GITHUB_OUTPUT
        } else {
          echo "flatcc_hash=none" >> $env:GITHUB_OUTPUT
        }

    - name: Cache Flatcc build
      id: cache_flatcc
      if: steps.flatcc_hash.outputs.flatcc_hash != 'none'
      uses: actions/cache@v4
      with:
        path: flatcc/bin/Release
        key: ${{ runner.os }}-flatcc-${{ steps.flatcc_hash.outputs.flatcc_hash }}

    - name: Build flatcc compiler
      if: steps.flatcc_hash.outputs.flatcc_hash != 'none' && steps.cache_flatcc.outputs.cache-hit != 'true'
      shell: cmd
      run: |
          cd flatcc
          cmake -G "Visual Studio 17 2022" -DCMAKE_POLICY_VERSION_MINIMUM=3.5
          cmake --build . --config Release

    - name: Create generated C flatbuffer files
      if: steps.flatcc_hash.outputs.flatcc_hash != 'none'
      shell: cmd
      run: |
        if exist "flatcc\bin\Release\flatcc.exe" (
          if exist "schemas\metadata_flatbuffer.fbs" (
            mkdir generated
            flatcc\bin\Release\flatcc.exe -rv --common_reader -o generated schemas\metadata_flatbuffer.fbs
          ) else (
            echo "Schema file not found, skipping C flatbuffer generation"
          )
        ) else (
          echo "FlatCC compiler not found, skipping C flatbuffer generation"
        )

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ./packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1

    - name: Obtain WDK from Nuget
      run: nuget restore ${{ env.SOLUTION_NAME }} -PackagesDirectory ".\packages"

    - name: Build driver
      run: msbuild ${{ env.SOLUTION_NAME }} /p:Configuration=${{ matrix.config }} /p:Platform=${{ matrix.platform }} /bl # /bl creates msbuild.binlog

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: BlorgFS-${{ matrix.config }}-${{ matrix.platform }}
        path: |
          ${{ github.workspace }}/${{ matrix.platform }}/${{ matrix.config }}/BlorgFS.*
          ${{ github.workspace }}/${{ matrix.platform }}/${{ matrix.config }}/*.inf
          ${{ github.workspace }}/${{ matrix.platform }}/${{ matrix.config }}/*.cat
          ${{ github.workspace }}/msbuild.binlog # Upload the build log
        if-no-files-found: warn