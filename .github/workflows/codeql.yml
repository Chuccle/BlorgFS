name: "CodeQL Advanced"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '41 23 * * 6'

env:
  SOLUTION_NAME: BlorgFS.sln
  ChocolateyUseWindowsCompression: 'true'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'c-cpp' && 'windows-latest') || ((matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest') }}
    timeout-minutes: 60
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: c-cpp
          build-mode: manual
          config: Release
          platform: x64
    
    steps:
    - name: Detect if Dependabot
      if: matrix.language == 'c-cpp'
      id: is_dependabot
      shell: pwsh
      run: echo "is_dependabot=${{ github.actor == 'dependabot[bot]' }}" >> $env:GITHUB_OUTPUT

    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        token: ${{ (matrix.language == 'c-cpp' && steps.is_dependabot.outputs.is_dependabot == 'true') && secrets.GH_DEPENDABOT_PAT || secrets.GH_PAT || github.token }}
        submodules: ${{ matrix.language == 'c-cpp' && 'recursive' || false }}

    - name: Get flatbuffers commit hash
      if: matrix.language == 'c-cpp'
      id: flatbuffers_hash
      shell: pwsh
      run: |
        if (Test-Path "BlorgService/flatbuffers") {
          cd BlorgService/flatbuffers
          $hash = git rev-parse HEAD
          Write-Host "FlatBuffers Hash: $hash"
          echo "flatbuffers_hash=$hash" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "FlatBuffers directory not found"
          echo "flatbuffers_hash=none" >> $env:GITHUB_OUTPUT
        }

    - name: Cache FlatBuffers build
      if: matrix.language == 'c-cpp' && steps.flatbuffers_hash.outputs.flatbuffers_hash != 'none'
      id: cache_flatbuffers
      uses: actions/cache@v4
      with:
        path: BlorgService/flatbuffers/Release
        key: ${{ runner.os }}-flatbuffers-${{ steps.flatbuffers_hash.outputs.flatbuffers_hash }}
        restore-keys: ${{ runner.os }}-flatbuffers-

    - name: Get flatcc commit hash
      if: matrix.language == 'c-cpp'
      id: flatcc_hash
      shell: pwsh
      run: |
        if (Test-Path "flatcc") {
          cd flatcc
          $hash = git rev-parse HEAD
          Write-Host "FlatCC Hash: $hash"
          echo "flatcc_hash=$hash" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "FlatCC directory not found"
          echo "flatcc_hash=none" >> $env:GITHUB_OUTPUT
        }

    - name: Cache Flatcc build
      if: matrix.language == 'c-cpp' && steps.flatcc_hash.outputs.flatcc_hash != 'none'
      id: cache_flatcc
      uses: actions/cache@v4
      with:
        path: flatcc/bin/Release
        key: ${{ runner.os }}-flatcc-${{ steps.flatcc_hash.outputs.flatcc_hash }}
        restore-keys: ${{ runner.os }}-flatcc-

    - name: Install build tools
      if: matrix.language == 'c-cpp' && ((steps.cache_flatcc.outputs.cache-hit != 'true' && steps.flatcc_hash.outputs.flatcc_hash != 'none') || (steps.cache_flatbuffers.outputs.cache-hit != 'true' && steps.flatbuffers_hash.outputs.flatbuffers_hash != 'none'))
      shell: pwsh
      run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

    - name: Build FlatBuffers compiler
      if: matrix.language == 'c-cpp' && steps.cache_flatbuffers.outputs.cache-hit != 'true' && steps.flatbuffers_hash.outputs.flatbuffers_hash != 'none'
      shell: cmd
      run: |
        cd BlorgService\flatbuffers
        cmake -G "Visual Studio 17 2022"
        cmake --build . --config Release

    - name: Build flatcc compiler
      if: matrix.language == 'c-cpp' && steps.cache_flatcc.outputs.cache-hit != 'true' && steps.flatcc_hash.outputs.flatcc_hash != 'none'
      shell: cmd
      run: |
        cd flatcc
        cmake -G "Visual Studio 17 2022" -DCMAKE_POLICY_VERSION_MINIMUM=3.5
        cmake --build . --config Release

    - name: Create generated C++ flatbuffer files
      if: matrix.language == 'c-cpp' && steps.flatbuffers_hash.outputs.flatbuffers_hash != 'none'
      shell: cmd
      run: |
        if exist "BlorgService\flatbuffers\Release\flatc.exe" (
          if exist "schemas\metadata_flatbuffer.fbs" (
            if not exist "BlorgService\generated" mkdir BlorgService\generated
            BlorgService\flatbuffers\Release\flatc.exe --cpp -o BlorgService\generated schemas\metadata_flatbuffer.fbs
            echo "Generated C++ FlatBuffer files"
          ) else (
            echo "Schema file not found, skipping C++ flatbuffer generation"
          )
        ) else (
          echo "FlatBuffers C++ compiler not found, skipping C++ generation"
        )

    - name: Create generated C flatbuffer files
      if: matrix.language == 'c-cpp' && steps.flatcc_hash.outputs.flatcc_hash != 'none'
      shell: cmd
      run: |
        if exist "flatcc\bin\Release\flatcc.exe" (
          if exist "schemas\metadata_flatbuffer.fbs" (
            if not exist "generated" mkdir generated
            flatcc\bin\Release\flatcc.exe -rv --common_reader -o generated schemas\metadata_flatbuffer.fbs
            echo "Generated C FlatBuffer files"
          ) else (
            echo "Schema file not found, skipping C flatbuffer generation"
          )
        ) else (
          echo "FlatCC compiler not found, skipping C generation"
        )

    - name: Cache NuGet packages
      if: matrix.language == 'c-cpp'
      uses: actions/cache@v4
      with:
        path: ./packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.config') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Setup Developer Command Prompt
      if: matrix.language == 'c-cpp'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.platform }}

    - name: Obtain WDK from Nuget
      if: matrix.language == 'c-cpp'
      run: |
        echo "Restoring NuGet packages..."
        nuget restore ${{ env.SOLUTION_NAME }} -PackagesDirectory ".\packages"
        if ($LASTEXITCODE -ne 0) {
          Write-Error "NuGet restore failed"
          exit 1
        }

    - name: Initialize CodeQL (C/C++)
      if: matrix.language == 'c-cpp'
      uses: github/codeql-action/init@v4
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        packs: microsoft/windows-drivers@1.1.0
        queries: security-extended,security-and-quality

    - name: Initialize CodeQL (Actions)
      if: matrix.language == 'actions'
      uses: github/codeql-action/init@v4
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        queries: security-extended,security-and-quality

    - name: Build driver for CodeQL analysis
      if: matrix.language == 'c-cpp'
      run: |
        echo "Building solution: ${{ env.SOLUTION_NAME }}"
        msbuild ${{ env.SOLUTION_NAME }} /p:Configuration=${{ matrix.config }} /p:Platform=${{ matrix.platform }} /m /verbosity:minimal
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Build failed"
          exit 1
        }

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v4
      with:
        category: "/language:${{ matrix.language }}"
        output: 'sarif-results'
        upload: 'never'

    - name: Filter-sarif
      if: matrix.language == 'c-cpp'
      uses: advanced-security/filter-sarif@v1
      with:
        patterns: |
          -flatcc/**
          -packages/**
          -**/*.generated.*
          -picohttpparser/**
          -schemas/**
          -generated/**
          -BlorgService/flatbuffers/**
          -BlorgService/generated/**
        input:  sarif-results/cpp.sarif
        output: sarif-results/cpp.sarif

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v4
      with:
        sarif_file: sarif-results

    - name: Upload loc as a Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: sarif-results-${{ matrix.language }}
        path: sarif-results
        retention-days: 1